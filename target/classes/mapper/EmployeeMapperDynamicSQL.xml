<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cwh.mybatis.dao.EmployeeMapperDynamicSQL">
    <!--
        if:判断
        choose（when，otherwise）：分支选择；带了break的swtich-case
        如果带了id就用id查，如果带了lastName就用lastName查；只会进入其中的一个
        trim：字符串截取（where，set0
        foreach
    -->
    <!--public List<Employee> getEmpsByConditionIf(Employee Employee);-->
    <select id="getEmpsByConditionIf" resultType="com.cwh.mybatis.beans.Employee">
        select * from table_employee
        <where>
            <!--
                查询的时候如果某些条件没带可能sql拼装会有问题
                1.给where后面加上1=1，以后的条件都and xxx。
                2.mybatis使用where标签来将所有的查询条件包括在内。mybatis就会将where标签中拼装的sql，多出来的and或者or去掉
                where只会去掉第一个多出来的and或者or。
            -->
        <!--
            test:判断表达式（OGNL）
            OGNL参照官方文档
                类似于 c:if test
                从参数中取值进行判断
                遇见特殊符号应该去写转义字符：
        -->
        <if test="id!=null">
          id=#{id}
        </if>
        <if test="lastName!=null &amp;&amp; lastName!=&quot;&quot;">
         and last_name like #{lastName}
        </if>
        <if test="gender==0 or gender==1 ">
         and gender=#{gender}
        </if>
        <if test="email!=null &amp;&amp; email.trim()!=&quot;&quot;">
          and email=#{email}
        </if>
        </where>
    </select>

    <!--public List<Employee> getEmpsByConditionTrim(Employee Employee);-->
    <select id="getEmpsByConditionTrim" resultType="com.cwh.mybatis.beans.Employee">
        select * from table_employee
        <!--后面多出的and或者or where标签不能解决
        prefix=""：前缀：trim标签体重是整个字符串拼串后的结果
                prefix给拼串后的整个字符串加一个前缀
        prefixOverrides="":
                前缀覆盖：去掉整个字符串前面多余的字符
        suffix="":后缀
            suffix给拼串后的整个字符串加一个后缀
        suffixOverrides=""
                后缀覆盖:去掉整个字符串后面多余的字符

        -->
        <trim
                prefix="where"
                prefixOverrides="and"
                suffixOverrides="and">
            <if test="id!=null">
                id=#{id}
            </if>
            <if test="lastName!=null &amp;&amp; lastName!=&quot;&quot;">
                and last_name like #{lastName}
            </if>
            <if test="gender==0 or gender==1 ">
                and gender=#{gender}
            </if>
            <if test="email!=null &amp;&amp; email.trim()!=&quot;&quot;">
                and email=#{email}
            </if>
    </trim>
    </select>

    <!--public List<Employee> getEmpsByConditionChoose(Employee Employee);-->
    <select id="getEmpsByConditionChoose" resultType="com.cwh.mybatis.beans.Employee">
        select * from table_employee
        <where>
            <!--如果带了id就用id查，如果带了lastName就用lastName查；只会进入其中的一个-->
            <choose>
                <when test="id!=null">
                    id=#{id}
                </when>
                <when test="lastName!=null">
                    last_name like #{lastName}
                </when>
                <when test="email!=null">
                    email = #{email}
                </when>
                <otherwise>
                    gender = 0
                </otherwise>
            </choose>
        </where>
    </select>

    <!--    public void updateEmp(Employee employee); -->
    <update id="updateEmp">
        <!--update table_employee
        <set>
            <if test="lastName!=null">
                last_name=#{lastName},
            </if>
            <if test="email!=null">
                email=#{email},
            </if>
            <if test="gender!=null">
                gender =#{gender}
            </if>
        </set>
        where id=#{id}-->
        update table_employee
        <trim prefix="set" suffixOverrides=",">

                <if test="lastName!=null">
                    last_name=#{lastName},
                </if>
                <if test="email!=null">
                    email=#{email},
                </if>
                <if test="gender!=null">
                    gender =#{gender}
                </if>

            where id=#{id}
        </trim>
    </update>
    <!--    public List<Employee> getEmpsByConditionForeach(List<Integer> ids);-->
    <select id="getEmpsByConditionForeach" parameterType="java.util.ArrayList" resultType="com.cwh.mybatis.beans.Employee">
        select * from table_employee where id in
        <!--
        collection:指定要遍历的集合：
            list类型的参数会特殊处理封装在map中，map的key就叫list
        item：将当前遍历出的元素赋值给指定的变量
        separator：每个元素之间的分隔符
        open：遍历出所有结果拼接一个开始的字符
        close：遍历出所有结果拼接一个结束的字符
        index：索引。遍历list的时候是index就是索引，item就是当前值
                    遍历map的时候index表示的就是map的key，item就是map的值
                    #{变量名}就能取出变量的值也就是当前遍历出的元素
        -->
       <foreach collection="list" item="item_id" separator=","
                open="(" close=")">
           #{item_id}
       </foreach>
    </select>
    <!--    public void AddEmps(@Param("emps") List<Employee> employeeList);-->
    <!--MySql下批量保存：可以foreach遍历MySQL支持values(),(),()语法-->
    <insert id="AddEmps">
        insert into table_employee(
        <include refid="insertColumn" >
            <!--<property name="" value=""/>-->
        </include>
        )
        values
        <foreach collection="emps" item="emp" separator=",">
            (#{emp.lastName},#{emp.gender},#{emp.email},#{emp.department.id})
        </foreach>
    </insert>
    <!--
        抽取可重用的sql片段。方便后面引用
        1.sql抽取：经常将要查询的列名，或者插入用的列名抽取出来方便引用
        2.include来引用已经抽取的sql
        3.include还可以自定义一些property，sql标签内部就能使用自定义的属性
                include-property：取值的正确方式${prop},
                #{不能使用这种方式}
    -->
    <sql id="insertColumn">
        last_name, gender, email, department_id
    </sql>
    <!--这种方式需要数据库连接属性allowMultiQueries=true；
        这种分号分隔多个sql可以用于其他的批量操作（删除，修改）-->
<!--    <insert id="AddEmps">
        <foreach collection="emps" item="emp" separator=";">
            insert into table_employee(last_name, gender, email, department_id)
            values (#{emp.lastName},#{emp.gender},#{emp.email},#{emp.department.id})
        </foreach>
    </insert>-->





    <!--两个内置参数：
        不只是方法传递过来的参数可以被用来判断，取值。。。
        mybatis默认还有两个内置参数：
        _parameter:代表整个参数
            单个参数：_parameter就是这个参数
            多个参数：参数会被封装为一个map；_parameter就是代表这个参数map

        _databaseId:如果配置了databaseIdProvider标签。
            _databaseId就代表当前数据库的别名
    -->
    <!--public List<Employee> getEmpsTestInnerParameter(Employee employee);-->
    <select id="getEmpsTestInnerParameter" resultType="com.cwh.mybatis.beans.Employee">
        <if test="_databaseId=='mysql'">
            select * from table_employee
            <!--bind:可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值-->
            <!--<bind name="_lastName" value="'%'+lastName+'%'"/>-->
            <if test="_parameter!=null">
                where last_name like #{_parameter.lastName}
            </if>

        </if>
        <if test="_databaseId=='oracle'">
            select * from table_employee
        </if>
    </select>
</mapper>